<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://caozhiyi.github.io</id>
    <title>czy-blog</title>
    <updated>2020-12-05T02:50:13.753Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://caozhiyi.github.io"/>
    <link rel="self" href="https://caozhiyi.github.io/atom.xml"/>
    <subtitle>会写代码的莫扎特</subtitle>
    <logo>https://caozhiyi.github.io/images/avatar.png</logo>
    <icon>https://caozhiyi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, czy-blog</rights>
    <entry>
        <title type="html"><![CDATA[no one]]></title>
        <id>https://caozhiyi.github.io/post/no-one/</id>
        <link href="https://caozhiyi.github.io/post/no-one/">
        </link>
        <updated>2020-12-05T02:45:09.000Z</updated>
        <content type="html"><![CDATA[<p>日出扶桑一丈高，人间万事细如毛。<br>
野夫怒见不平处，磨损胸中万古刀。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[envoy的线程本地存储(TLS)]]></title>
        <id>https://caozhiyi.github.io/post/envoy-de-xian-cheng-ben-di-cun-chu-tls/</id>
        <link href="https://caozhiyi.github.io/post/envoy-de-xian-cheng-ben-di-cun-chu-tls/">
        </link>
        <updated>2020-12-03T14:12:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="接口类">接口类</h2>
<ul>
<li><code>SlotAllocator</code> 线程本地存储的solt构造接口</li>
<li><code>Slot</code> 线程本地存储的solt接口，定义了solt支持的操作</li>
<li><code>TypedSlot</code></li>
<li><code>Instance</code> 线程与TLS绑定的注册接口</li>
<li><code>ThreadLocalObject</code> 线程本地存储的接口<br>
接口类只有以上几种。</li>
</ul>
<h2 id="实现类">实现类</h2>
<h3 id="instanceimpl">InstanceImpl</h3>
<p>继承于<code>Instance</code>接口，实现了TLS的所有操作，envoy在<code>MainCommonBase::MainCommonBase</code>构造函数中创建</p>
<pre><code class="language-c++">tls_ = std::make_unique&lt;ThreadLocal::InstanceImpl&gt;();
</code></pre>
<p>所以全局只有一个。<br>
首先看下申明的成员变量：</p>
<pre><code class="language-c++">// 线程本地存储变量类型定义
struct ThreadLocalData {
    // 存储本地线程的dispatcher
    Event::Dispatcher* dispatcher_{};
    // 每个线程都单独持有的ThreadLocalObject
    std::vector&lt;ThreadLocalObjectSharedPtr&gt; data_;
};
// 实现TLS存储的核心变量
static thread_local ThreadLocalData thread_local_data_;

// solt构造池，每创建一个solt都在这里存一个裸指针，
// 删除时只置为nilltr,因为构造的solt生存周期实际由智能指针管理
// 只能在主线程中构造solt，所以访问此两边不需要加锁
std::vector&lt;Slot*&gt; slots_;
// 空闲index存储，指向slots_移除之后的索引
std::list&lt;uint32_t&gt; free_slot_indexes_;
// 所有注册到TLS的dispatcher(不包括主线程的)。每个线程都有一个
std::list&lt;std::reference_wrapper&lt;Event::Dispatcher&gt;&gt; registered_threads_;
// 主线程id，用于检测当前执行线程是否是主线程
std::thread::id main_thread_id_;
// 主线程dispatcher
Event::Dispatcher* main_thread_dispatcher_{}; 
// 标识TLS系统是否关闭
std::atomic&lt;bool&gt; shutdown_{};
</code></pre>
<p>知道了成员变量的作用，接口的实现就会明了：</p>
<ul>
<li><code>allocateSlot</code> 只能在主线程上执行，构造一个solt，如果<code>free_slot_indexes_</code>为空，则增长<code>slots_</code>, 否则使用<code>free_slot_indexes_</code>中的索引</li>
<li><code>registerThread</code> 只能在主线程上执行，将非主线程的dispatcher添加到<code>registered_threads_</code>中，将主线程的dispatcher赋值给<code>main_thread_dispatcher_</code></li>
<li><code>shutdownGlobalThreading</code> 只能在主线程上执行, 设置<code>shutdown_</code>标识</li>
<li><code>shutdownThread</code> 只能在<code>shutdownGlobalThreading</code>之后调用，释放本地线程存储的<code>thread_local_data_</code></li>
<li><code>dispatcher</code> 返回本线程的dispatcher</li>
<li><code>removeSlot</code> 只能在主线程上执行，将参数的solt索引对应的<code>slots_</code>置空，并添加到<code>free_slot_indexes_</code>中，接着将所有线程的<code>thread_local_data_.data_</code>对应索引位置置空</li>
<li><code>runOnAllThreads</code> 只能在主线程上执行，遍历<code>registered_threads_</code>, 调用<code>dispatcher.post</code>将回调函数在所有线程上执行，包括主线<br>
还有一个重载的<code>runOnAllThreads</code>支持回调函数在所有线程执行完成之后再通过回调函数通知回主线程<pre><code class="language-c++">void InstanceImpl::runOnAllThreads(Event::PostCb cb, Event::PostCb all_threads_complete_cb) {
    //...
    // 首先在主线程中执行
    cb();

    // 用智能指针包一下cb，并设置一个智能指针的析构器，在析构器中调用主线程的dispatcher-&gt;post将回调通知函数发送到主线程中执行
    Event::PostCbSharedPtr cb_guard(new Event::PostCb(cb),
                                [this, all_threads_complete_cb](Event::PostCb* cb) {
                                  main_thread_dispatcher_-&gt;post(all_threads_complete_cb);
                                  delete cb;
                                });

    for (Event::Dispatcher&amp; dispatcher : registered_threads_) {
         dispatcher.post([cb_guard]() -&gt; void { (*cb_guard)(); });
      }
    }
</code></pre>
</li>
<li><code>setThreadLocal</code> 设置线程本地存储，每个线程都只操作本地线程</li>
</ul>
<p>以上就是<code>InstanceImpl</code>的全部实现，原理其实很简单，引起变更的删除添加操作都只能在主线程中执行，然后通过<code>dispatcher.post</code>将数据变更操作分发到其他线程中，而其他线程只读取TLS，从而实现线程间的数据传递，而不用对数据进行加锁。<br>
接下来，我们看下<code>SlotImpl</code>的实现。</p>
<h3 id="slotimpl">SlotImpl</h3>
<p><code>SlotImpl</code>继承自<code>Slot</code>接口，定义了线程本地存储对象的一些操作，还是先看一下成员变量</p>
<pre><code class="language-c++">// 全局唯一的`InstanceImpl`引用
InstanceImpl&amp; parent_;
// 自己在slots_和thread_local_data_.data_中的位置索引
const uint32_t index_;
// 线程间回调函数执行时检测本solt是否还有效
std::shared_ptr&lt;bool&gt; still_alive_guard_;
</code></pre>
<p>我们可以看到，虽然<code>SlotImpl</code>是对<code>ThreadLocalObject</code>的一层包装，但是并没有持有<code>ThreadLocalObject</code>的变量，而是存储了一个指向本地线程存储队列的索引。</p>
<ul>
<li><code>dataCallback</code> 在cb回调函数上再包装一层，在执行前判断本solt是否已经析构</li>
<li><code>runOnAllThreads</code> 将回调函数在本地线程存储的队列，还是调用<code>InstanceImpl</code>的<code>runOnAllThreads</code>函数<br>
上述函数传递的回调参数函数类型为：</li>
</ul>
<pre><code class="language-c++">using UpdateCb = std::function&lt;void(ThreadLocalObjectSharedPtr)&gt;;
</code></pre>
<p>用于访问修改线程本地存储的数据</p>
<ul>
<li><code>set</code> solt的初始化方法，只能在主线程中调用。将传入的回调函数传入各个线程执行</li>
<li><code>get</code> 获取本地线程存储的<code>ThreadLocalObjectSharedPtr</code></li>
</ul>
<h2 id="使用">使用</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[envoy 启动过程]]></title>
        <id>https://caozhiyi.github.io/post/envoy-qi-dong-guo-cheng/</id>
        <link href="https://caozhiyi.github.io/post/envoy-qi-dong-guo-cheng/">
        </link>
        <updated>2020-12-01T14:52:30.000Z</updated>
        <content type="html"><![CDATA[<p>首先我们猜想一下envoy启动过程所做的事情：</p>
<ol>
<li>解析输入的命令行</li>
<li>启动主线程循环和其他worker线程</li>
<li>启动主线程xDS监听端口</li>
<li>根据启动配置文件启动初始listener即其他</li>
</ol>
<p>接下来我们就沿着main接口，找一下上述的几个过程都是在哪里实现的：</p>
<p>首先，入口函数在exe/main.cc文件中，在main函数中调用</p>
<pre><code class="language-c++">Envoy::MainCommon::main
</code></pre>
<p>在这里创建了<code>Envoy::MainCommon</code>对象，在其构造函数中，会创建<code>Envoy::OptionsImpl</code>对象和<code>MainCommonBase</code>对象。接下来我们分别进入这两个类的构造函数中：</p>
<ul>
<li>
<p>首先是<code>OptionsImpl</code>的构造函数，在这个构造函数中，主要工作有：</p>
<ul>
<li>通过TCLAP库解析命令行参数，这些参数中包含启动的配置文件路径</li>
<li>设置log日志等级与格式</li>
</ul>
</li>
<li>
<p>接着是<code>MainCommonBase</code>构造函数，注意上述的<code>Envoy::OptionsImpl</code>实例会作为参数传递给<code>MainCommonBase</code>的构造函数，其主要的工作有：</p>
<ul>
<li>根据启动模式的不同执行不同的逻辑</li>
<li>如果是正常启动流程，则创建<code>Server::HotRestartImpl</code>实例</li>
<li>如果是正常启动流程，则创建<code>Server::InstanceImpl</code>实例</li>
<li>创建</li>
</ul>
</li>
<li>
<p>接下来进入<code>Server::InstanceImpl</code>的构造函数，<code>Server::HotRestartImpl</code>的实例也会作为参数传入<code>Server::InstanceImpl</code>的构造函数</p>
<ul>
<li><code>InstanceImpl</code>是envoy的全局服务实例，在构造函数中会创建一些全局的基础组件，包括主线成的dispatcher</li>
<li>如果是热重启，则在<code>HotRestartingParent::initialize</code>会创建一个<code>DomainSocket</code>监听<code>HotRestartMessage</code>消息</li>
<li>接着在<code>InstanceImpl::initialize</code>函数中，加载启动时的配置文件，配置文件路径通过main函数的参数解析获取
<ol>
<li><code>InstanceUtil::loadBootstrapConfig</code>函数会解析传入的配置文件数据到<code>envoy::config::bootstrap::v3::Bootstrap</code>类型实例中。</li>
<li>然后会创建<code>ListenerManagerImpl</code>实例，而在<code>ListenerManagerImpl</code>的构造函数中，会创建worker线程对象：<pre><code class="language-c++">
for (uint32_t i = 0; i &lt; server.options().concurrency(); i++) {
    workers_.emplace_back(
    worker_factory.createWorker(i, server.overloadManager(), absl::StrCat(&quot;worker_&quot;, i)));
}
</code></pre>
创建的<code>WorkerImpl</code>实例是工作线程的封装，其构造函数中会创建该线程的dispatcher，但是还没有将worker启动起来。</li>
<li>通过工厂创建cluster manager，具体的执行代码在<code>MainImpl::initialize</code>中<pre><code class="language-c++">cluster_manager_ = cluster_manager_factory.clusterManagerFromProto(bootstrap);
</code></pre>
最终会调用到<code>ClusterManagerImpl::ClusterManagerImpl</code>构造函数，在这个函数中会读取启动配置文件中设置的静态cluster。<br>
同样，在<code>MainImpl::initialize</code>中，将启动配置文件中设置的listener配置设置到listener manager中。</li>
<li>启动admin线程http服务<pre><code class="language-c++">admin_-&gt;startHttpListener(initial_config.admin().accessLogPath(), options.adminAddressPath(),
                      initial_config.admin().address(),
                      initial_config.admin().socketOptions(),
                      stats_store_.createScope(&quot;listener.admin.&quot;));
</code></pre>
<code>WAdminImpl::AdminImpl</code>构造函数中会注册uri及相关处理函数<br>
到这里，在构造函数中的初始化工作执行完成</li>
<li>其他全局变量构建，包括tls等</li>
</ol>
</li>
</ul>
</li>
</ul>
<p>说了这么多，才执行完<code>Envoy::MainCommon</code>的构造函数，接下来进入<code>run()</code>函数：<br>
这个函数中依然先判断一下启动的模式，如果是正常启动模式，则会进入<code>InstanceImpl::run()</code>在这里，会开始执行主线程和worker线程主循环，即dispatcher的run</p>
<ul>
<li>在<code>InstanceImpl::startWorkers()</code>中，将之前创建的listener传递给所有的worker线程，然后调用<code>WorkerImpl::start</code>创建对应的线程对象。</li>
<li>启动主线程循环<pre><code class="language-c++">  dispatcher_-&gt;run(Event::Dispatcher::RunType::Block);
</code></pre>
</li>
</ul>
<p>调用流程示意图：</p>
<pre><code class="language-c++">Envoy::MainCommon::main
  |-&gt; Envoy::MainCommon 
      |-&gt; Envoy::OptionsImpl 解析命令行参数
      |-&gt; MainCommonBase::MainCommonBase
          |-&gt; Server::InstanceImpl 
              |-&gt; InstanceImpl::initialize 解析启动配置，创建listener manager, worker对象, cluster manager，启动admin http服务
  |-&gt; MainCommonBase::run
      |-&gt;InstanceImpl::run 启动worker线程循环，启动主线程循环
</code></pre>
]]></content>
    </entry>
</feed>